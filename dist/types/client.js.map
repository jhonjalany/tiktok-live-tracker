{"version":3,"file":"client.js","sourceRoot":"","sources":["../../src/types/client.ts"],"names":[],"mappings":"","sourcesContent":["import { AxiosRequestConfig } from 'axios';\r\nimport * as http from 'node:http';\r\nimport * as tikTokSchema from '@/types/tiktok-schema';\r\nimport { MessageFns, ProtoMessageFetchResult, WebcastPushFrame } from '@/types/tiktok-schema';\r\n\r\nexport type TikTokLiveConnectionOptions = {\r\n    processInitialData: boolean;\r\n    fetchRoomInfoOnConnect: boolean;\r\n    enableExtendedGiftInfo: boolean;\r\n    enableRequestPolling: boolean;\r\n    requestPollingIntervalMs: number;\r\n    sessionId: string | null;\r\n    ttTargetIdc: string | null;\r\n    signApiKey: string | null;\r\n    authenticateWs: boolean;\r\n    preferredAgentIds: string[];\r\n    connectWithUniqueId: boolean;\r\n    disableEulerFallbacks: boolean;\r\n\r\n    webClientParams: Record<string, string>;\r\n    webClientHeaders: Record<string, string>;\r\n    webClientOptions: AxiosRequestConfig;\r\n\r\n    wsClientHeaders: Record<string, string>;\r\n    wsClientParams: Record<string, string>;\r\n    wsClientOptions: http.RequestOptions;\r\n\r\n    // Override the default websocket provider\r\n    signedWebSocketProvider?: (props: FetchSignedWebSocketParams) => Promise<ProtoMessageFetchResult>\r\n}\r\n\r\n\r\nexport type RoomInfo = Record<string, any> & { data: { status: number } }\r\nexport type RoomGiftInfo = any;\r\n\r\nexport type FetchSignedWebSocketParams = {\r\n    roomId?: string;\r\n    uniqueId?: string;\r\n    preferredAgentIds?: string[];\r\n    ttTargetIdc?: string;\r\n    sessionId?: string;\r\n}\r\n\r\n\r\nexport type WebcastHttpClientConfig = {\r\n    customHeaders: Record<string, string>;\r\n    axiosOptions: AxiosRequestConfig;\r\n    clientParams: Record<string, string>;\r\n    authenticateWs?: boolean;\r\n    signApiKey?: string;\r\n}\r\n\r\nexport type DecodedWebcastPushFrame = WebcastPushFrame & {\r\n    protoMessageFetchResult?: ProtoMessageFetchResult;\r\n}\r\n\r\n\r\nexport interface IWebcastConfig {\r\n    TIKTOK_HOST_WEB: string;\r\n    TIKTOK_HOST_WEBCAST: string;\r\n    TIKTOK_HTTP_ORIGIN: string;\r\n\r\n    // HTTP Client Options\r\n    DEFAULT_HTTP_CLIENT_COOKIES: Record<string, string>;\r\n    DEFAULT_HTTP_CLIENT_PARAMS: Record<string, string>;\r\n    DEFAULT_HTTP_CLIENT_OPTIONS: AxiosRequestConfig;\r\n    DEFAULT_WS_CLIENT_PARAMS_APPEND_PARAMETER: string;\r\n    DEFAULT_HTTP_CLIENT_HEADERS: Record<string, string> & {\r\n        'User-Agent': string;\r\n    };\r\n\r\n    // WS Client Options\r\n    DEFAULT_WS_CLIENT_PARAMS: Record<string, string>;\r\n    DEFAULT_WS_CLIENT_HEADERS: Record<string, string> & {\r\n        'User-Agent': string;\r\n    };\r\n\r\n}\r\n\r\n\r\ntype ExtractMessageType<T> = T extends MessageFns<infer U> ? U : never;\r\n\r\n// Messages\r\nexport type WebcastMessage = {\r\n    [K in keyof typeof tikTokSchema as ExtractMessageType<typeof tikTokSchema[K]> extends never ? never : K]:\r\n    ExtractMessageType<typeof tikTokSchema[K]>;\r\n};\r\n\r\ntype HasCommon<T> = T extends { common: any } ? T : never;\r\n\r\n\r\n// Top-Level Messages\r\nexport type WebcastEventMessage = {\r\n    [K in keyof WebcastMessage as HasCommon<WebcastMessage[K]> extends never ? never : K]: WebcastMessage[K];\r\n};\r\n\r\n\r\nexport interface IWebcastDeserializeConfig {\r\n    skipMessageTypes: (keyof WebcastEventMessage)[];\r\n}\r\n\r\n\r\nexport interface IWebcastDeserializeConfig {\r\n    skipMessageTypes: (keyof WebcastEventMessage)[];\r\n}\r\n\r\n\r\nexport type DecodedData = {\r\n    [K in keyof WebcastEventMessage]: {\r\n        type: K;\r\n        data: WebcastEventMessage[K]\r\n    }\r\n}[keyof WebcastEventMessage];\r\n\r\ndeclare module '@/types/tiktok-schema' {\r\n    export interface BaseProtoMessage {\r\n        decodedData?: DecodedData;\r\n    }\r\n\r\n    export interface WebcastGiftMessage {\r\n        extendedGiftInfo?: any;\r\n    }\r\n\r\n}\r\n\r\nexport type WebcastHttpClientRequestParams = Omit<Omit<AxiosRequestConfig, 'url'>, 'baseURL'> & {\r\n    host: string;\r\n    path: string;\r\n    params?: Record<string, string>;\r\n    signRequest: boolean;\r\n};\r\n\r\n\r\nexport type WebSocketParams = {\r\n    [key: string]: string;\r\n    compress?: string;\r\n    room_id: string;\r\n    internal_ext: string;\r\n    cursor: string;\r\n}\r\n\r\n"]}