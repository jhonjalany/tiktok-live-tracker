{"version":3,"file":"http-client.js","sourceRoot":"","sources":["../../../../src/lib/web/lib/http-client.ts"],"names":[],"mappings":"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","sourcesContent":["import axios, { AxiosInstance } from 'axios';\r\nimport { deserializeMessage } from '@/lib/utilities';\r\nimport CookieJar from '@/lib/web/lib/cookie-jar';\r\nimport { WebcastHttpClientConfig, WebcastHttpClientRequestParams, WebcastMessage } from '@/types/client';\r\nimport Config from '@/lib/config';\r\nimport { ISignTikTokUrlBodyMethodEnum } from '@eulerstream/euler-api-sdk/dist/sdk/api';\r\nimport { EulerSigner } from '@/lib';\r\n\r\n\r\nexport default class WebcastHttpClient {\r\n\r\n    // HTTP Request Client\r\n    public readonly axiosInstance: AxiosInstance;\r\n\r\n    // External Cookie Jar\r\n    public readonly cookieJar: CookieJar;\r\n\r\n    // Internal Client Parameter Store\r\n    public clientParams: Record<string, string>;\r\n\r\n    constructor(\r\n        public readonly configuration: WebcastHttpClientConfig = {\r\n            customHeaders: {},\r\n            axiosOptions: {},\r\n            clientParams: {},\r\n            authenticateWs: false,\r\n            signApiKey: undefined\r\n        },\r\n        public readonly webSigner: EulerSigner = new EulerSigner({ apiKey: configuration.signApiKey })\r\n    ) {\r\n\r\n        this.axiosInstance = axios.create({\r\n            timeout: parseInt(process.env.TIKTOK_CLIENT_TIMEOUT || '10000'),\r\n            headers: { ...Config.DEFAULT_HTTP_CLIENT_HEADERS, ...this.configuration.customHeaders },\r\n            ...this.configuration.axiosOptions\r\n        });\r\n\r\n        this.clientParams = {\r\n            ...Config.DEFAULT_HTTP_CLIENT_PARAMS,\r\n            ...this.configuration.clientParams\r\n        };\r\n\r\n        // Create the cookie jar\r\n        this.cookieJar = new CookieJar(this.axiosInstance);\r\n\r\n        // Process the cookie header\r\n        if (!!this.configuration.customHeaders?.Cookie) {\r\n            const cookieHeader = this.configuration.customHeaders.Cookie;\r\n            delete this.configuration.customHeaders['Cookie'];\r\n            cookieHeader.split('; ').forEach((v: string) => this.cookieJar.processSetCookieHeader(v));\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Set the Room ID for the client\r\n     * @param roomId The client's Room ID\r\n     */\r\n    public set roomId(roomId: string) {\r\n        this.clientParams.room_id = roomId;\r\n    }\r\n\r\n    /**\r\n     * Get the Room ID for the client\r\n     */\r\n    public get roomId() {\r\n        return (this.clientParams.room_id as string) || '';\r\n    }\r\n\r\n    /**\r\n     * Build the URL for the request\r\n     *\r\n     * @param host The host for the request\r\n     * @param path The path for the request\r\n     * @param params The query parameters for the request\r\n     * @param signRequest Whether to sign the request or not\r\n     * @param method The HTTP method for the request\r\n     * @param headers The headers for the request\r\n     * @param extraOptions Additional axios request options\r\n     * @protected\r\n     */\r\n    public async request(\r\n        {\r\n            host,\r\n            path,\r\n            params,\r\n            signRequest,\r\n            method = 'GET',\r\n            headers,\r\n            ...extraOptions\r\n        }: WebcastHttpClientRequestParams\r\n    ) {\r\n\r\n        // Build the initial URL\r\n        let secure = !(host.startsWith('127.0.0.1') || host.startsWith('localhost') || host.startsWith('::1'));\r\n        let url: string = `http${secure ? 's' : ''}://${host}/${path}?${new URLSearchParams(params || {})}`;\r\n\r\n        // Sign the request. Assumption is if it doesn't throw, it worked.\r\n        if (signRequest) {\r\n            const signMethod = Object.values(ISignTikTokUrlBodyMethodEnum).includes(method.toUpperCase() as ISignTikTokUrlBodyMethodEnum);\r\n            if (!signMethod) {\r\n                throw new Error(`Invalid method for signing: ${method}. Must be one of ${Object.values(ISignTikTokUrlBodyMethodEnum).join(', ')}`);\r\n            }\r\n\r\n            const signResponse = await this.webSigner.webcastSign(\r\n                url,\r\n                method.toUpperCase() as ISignTikTokUrlBodyMethodEnum,\r\n                this.axiosInstance.defaults.headers['User-Agent'] as string,\r\n                this.cookieJar.sessionId,\r\n                this.cookieJar.ttTargetIdc\r\n            );\r\n\r\n            url = signResponse.response.signedUrl;\r\n\r\n            headers ||= {};\r\n            headers['User-Agent'] = signResponse.response.userAgent;\r\n        }\r\n\r\n\r\n        // Execute the request\r\n        return this.axiosInstance.request(\r\n            {\r\n                url: url,\r\n                headers: headers ?? undefined,\r\n                method: method,\r\n                ...extraOptions\r\n            }\r\n        );\r\n\r\n    }\r\n\r\n    /**\r\n     * Get HTML from TikTok website\r\n     *\r\n     * @param path Path to the HTML page\r\n     * @param options Additional request options\r\n     */\r\n    public async getHtmlFromTikTokWebsite(\r\n        path: string,\r\n        options: Partial<WebcastHttpClientRequestParams> = {}\r\n    ): Promise<string> {\r\n\r\n        const fetchResponse = await this.request(\r\n            {\r\n                host: Config.TIKTOK_HOST_WEB,\r\n                path: path,\r\n                responseType: 'text',\r\n                signRequest: false,\r\n                ...options\r\n            }\r\n        );\r\n\r\n        return fetchResponse.data;\r\n    }\r\n\r\n    /**\r\n     * Get deserialized object from Webcast API\r\n     *\r\n     * @param path Path to the API endpoint\r\n     * @param params Query parameters to be sent with the request\r\n     * @param schemaName Schema name for deserialization\r\n     * @param signRequest Whether to sign the request or not\r\n     * @param options Additional request options\r\n     */\r\n    public async getDeserializedObjectFromWebcastApi<T extends keyof WebcastMessage>(\r\n        path: string,\r\n        params: Record<string, any>,\r\n        schemaName: T,\r\n        signRequest: boolean = false,\r\n        options: Partial<WebcastHttpClientRequestParams> = {}\r\n    ) {\r\n        const fetchResponse = await this.request(\r\n            {\r\n                host: Config.TIKTOK_HOST_WEBCAST,\r\n                path: 'webcast/' + path,\r\n                params: params,\r\n                signRequest: signRequest,\r\n                responseType: 'arraybuffer',\r\n                ...options\r\n            }\r\n        );\r\n\r\n        return deserializeMessage(schemaName, fetchResponse.data);\r\n    }\r\n\r\n    public async postJsonObjectToWebcastApi<T extends Record<string, any>>(\r\n        path: string,\r\n        params: Record<string, string>,\r\n        data: Record<string, any>,\r\n        signRequest: boolean = false,\r\n        options: Partial<WebcastHttpClientRequestParams> = {}\r\n    ): Promise<T> {\r\n\r\n        options.headers ||= {};\r\n        options.headers['Content-Type'] = 'application/json; charset=UTF-8';\r\n\r\n        const fetchResponse = await this.request(\r\n            {\r\n                host: Config.TIKTOK_HOST_WEBCAST,\r\n                path: 'webcast/' + path,\r\n                data: data,\r\n                params: params,\r\n                responseType: 'json',\r\n                signRequest: signRequest,\r\n                method: 'POST',\r\n                ...options\r\n            }\r\n        );\r\n\r\n        return fetchResponse.data;\r\n    }\r\n\r\n    /**\r\n     * Get JSON object from Webcast API\r\n     *\r\n     * @param path Path to the API endpoint\r\n     * @param params Query parameters to be sent with the request\r\n     * @param signRequest Whether to sign the request or not\r\n     * @param options Additional request options\r\n     */\r\n    public async getJsonObjectFromWebcastApi<T extends Record<string, any>>(\r\n        path: string,\r\n        params: Record<string, string>,\r\n        signRequest: boolean = false,\r\n        options: Partial<WebcastHttpClientRequestParams> = {}\r\n    ): Promise<T> {\r\n\r\n        options.headers = {};\r\n\r\n        const fetchResponse = await this.request(\r\n            {\r\n                host: Config.TIKTOK_HOST_WEBCAST,\r\n                path: 'webcast/' + path,\r\n                params: params,\r\n                responseType: 'json',\r\n                signRequest: signRequest,\r\n                headers: {\r\n                    ...options.headers\r\n                },\r\n                ...options\r\n            }\r\n        );\r\n\r\n        return fetchResponse.data;\r\n    }\r\n\r\n    /**\r\n     * Get JSON object from TikTok API\r\n     *\r\n     * @param path Path to the API endpoint\r\n     * @param params Query parameters to be sent with the request\r\n     * @param signRequest Whether to sign the request or not\r\n     * @param options Additional request options\r\n     */\r\n    public async getJsonObjectFromTikTokApi<T extends Record<string, any>>(\r\n        path: string,\r\n        params: Record<string, string>,\r\n        signRequest: boolean = false,\r\n        options: Partial<WebcastHttpClientRequestParams> = {}\r\n    ): Promise<T> {\r\n\r\n        const fetchResponse = await this.request(\r\n            {\r\n                host: Config.TIKTOK_HOST_WEB,\r\n                path: path,\r\n                params: params,\r\n                responseType: 'json',\r\n                signRequest: signRequest,\r\n                ...options\r\n            }\r\n        );\r\n\r\n        return fetchResponse.data;\r\n    }\r\n\r\n}\r\n\r\n"]}