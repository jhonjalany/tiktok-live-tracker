{"version":3,"file":"fetch-room-info.js","sourceRoot":"","sources":["../../../../src/lib/web/routes/fetch-room-info.ts"],"names":[],"mappings":";;;AAAA,yCAAsC;AACtC,2CAA0E;AAM1E,MAAa,kBAAmB,SAAQ,aAA4C;IAEhF,KAAK,CAAC,IAAI,CAAC,MAA2B;QAClC,iBAAiB;QACjB,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC;QAG5C,+BAA+B;QAC/B,IAAI,MAAM,IAAI,IAAI,EAAE;YAChB,MAAM,IAAI,2BAAkB,CAAC,6DAA6D,CAAC,CAAC;SAC/F;QAED,kBAAkB;QAClB,IAAI;YACA,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,2BAA2B,CACnD,YAAY,EACZ,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,EAClD,KAAK,CACR,CAAC;SACL;QAAC,OAAO,GAAG,EAAE;YACV,MAAM,IAAI,6BAAoB,CAAC,8BAA8B,GAAG,CAAC,OAAO,EAAE,EAAE,GAAG,CAAC,CAAC;SACpF;IAEL,CAAC;CAEJ;AAzBD,gDAyBC","sourcesContent":["import { Route } from '@/types/route';\r\nimport { InvalidResponseError, MissingRoomIdError } from '@/types/errors';\r\nimport { RoomInfo } from '@/types/client';\r\n\r\nexport type RoomInfoRouteParams = { roomId?: string; } | void;\r\nexport type RoomInfoResponse = any;\r\n\r\nexport class FetchRoomInfoRoute extends Route<RoomInfoRouteParams, RoomInfoResponse> {\r\n\r\n    async call(params: RoomInfoRouteParams) {\r\n        // Assign Room ID\r\n        const { roomId } = params || this.webClient;\r\n\r\n\r\n        // Must have a Room ID to fetch\r\n        if (roomId == null) {\r\n            throw new MissingRoomIdError('Missing roomId. Please provide a roomId to the HTTP client.');\r\n        }\r\n\r\n        // Fetch room info\r\n        try {\r\n            return await this.webClient.getJsonObjectFromWebcastApi<RoomInfo>(\r\n                'room/info/',\r\n                { ...this.webClient.clientParams, roomId: roomId },\r\n                false\r\n            );\r\n        } catch (err) {\r\n            throw new InvalidResponseError(`Failed to fetch room info. ${err.message}`, err);\r\n        }\r\n\r\n    }\r\n\r\n}\r\n"]}