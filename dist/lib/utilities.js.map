{"version":3,"file":"utilities.js","sourceRoot":"","sources":["../../src/lib/utilities.ts"],"names":[],"mappings":"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","sourcesContent":["import * as tikTokSchema from '@/types/tiktok-schema';\r\nimport { MessageFns, ProtoMessageFetchResult, WebcastPushFrame } from '@/types/tiktok-schema';\r\nimport {\r\n    DecodedWebcastPushFrame,\r\n    IWebcastDeserializeConfig,\r\n    WebcastEventMessage,\r\n    WebcastMessage\r\n} from '@/types/client';\r\nimport * as zlib from 'node:zlib';\r\nimport * as util from 'node:util';\r\nimport { InvalidSchemaNameError, InvalidUniqueIdError } from '@/types/errors';\r\nimport { DevicePreset } from '@/lib/config';\r\n\r\nconst unzip = util.promisify(zlib.unzip);\r\nconst webcastEvents: (keyof WebcastEventMessage)[] = Object.keys(tikTokSchema).filter((message) => message.startsWith('Webcast')) as (keyof WebcastEventMessage)[];\r\n\r\nexport const WebcastDeserializeConfig: IWebcastDeserializeConfig = {\r\n    skipMessageTypes: []\r\n};\r\n\r\n/**\r\n * Find the messages defined in the TikTok protobuf schema\r\n */\r\nasync function getTikTokSchemaNames(): Promise<string[]> {\r\n    return Object.keys(tikTokSchema);\r\n}\r\n\r\n/**\r\n * Find the Webcast messages defined in the TikTok protobuf schema\r\n */\r\nasync function getWebcastEvents(): Promise<string[]> {\r\n    return (await getTikTokSchemaNames()).filter((message) => message.startsWith('Webcast'));\r\n}\r\n\r\nexport function deserializeMessage<T extends keyof WebcastMessage>(\r\n    protoName: T,\r\n    binaryMessage: Buffer\r\n): WebcastMessage[T] {\r\n\r\n    const messageFn: MessageFns<WebcastMessage[T]> | undefined = tikTokSchema[protoName as string];\r\n    if (!messageFn) throw new InvalidSchemaNameError(`Invalid schema name: ${protoName}`);\r\n    const deserializedMessage: WebcastMessage[T] = messageFn.decode(binaryMessage);\r\n\r\n    // Handle ProtoMessageFetchResult nested messages\r\n    if (protoName === 'ProtoMessageFetchResult') {\r\n        for (const message of (deserializedMessage as ProtoMessageFetchResult).messages || []) {\r\n            if (WebcastDeserializeConfig.skipMessageTypes.includes(message.type as keyof WebcastEventMessage)) {\r\n                continue;\r\n            }\r\n\r\n            if (!webcastEvents.includes(message.type as keyof WebcastEventMessage)) {\r\n                continue;\r\n            }\r\n\r\n            message.decodedData = {\r\n                type: message.type as keyof WebcastEventMessage,\r\n                data: deserializeMessage(message.type as keyof WebcastEventMessage, Buffer.from(message.payload))\r\n            } as any;\r\n\r\n        }\r\n    }\r\n\r\n    return deserializedMessage;\r\n}\r\n\r\n\r\nexport async function deserializeWebSocketMessage(binaryMessage: Uint8Array): Promise<DecodedWebcastPushFrame> {\r\n    // Websocket messages are in a container which contains additional data\r\n    // Message type 'msg' represents a normal WebcastResponse\r\n    const rawWebcastWebSocketMessage = WebcastPushFrame.decode(binaryMessage);\r\n    let protoMessageFetchResult: ProtoMessageFetchResult | undefined = undefined;\r\n\r\n    if (rawWebcastWebSocketMessage.type === 'msg') {\r\n        let binary: Uint8Array = rawWebcastWebSocketMessage.binary;\r\n\r\n        // Decompress binary (if gzip compressed)\r\n        // https://www.rfc-editor.org/rfc/rfc1950.html\r\n        if (binary && binary.length > 2 && binary[0] === 0x1f && binary[1] === 0x8b && binary[2] === 0x08) {\r\n            rawWebcastWebSocketMessage.binary = await unzip(binary);\r\n        }\r\n\r\n        protoMessageFetchResult = deserializeMessage('ProtoMessageFetchResult', Buffer.from(rawWebcastWebSocketMessage.binary));\r\n    }\r\n\r\n    const decodedContainer: DecodedWebcastPushFrame = rawWebcastWebSocketMessage;\r\n    decodedContainer.protoMessageFetchResult = protoMessageFetchResult;\r\n    return decodedContainer;\r\n\r\n}\r\n\r\nexport function validateAndNormalizeUniqueId(uniqueId: string) {\r\n    if (typeof uniqueId !== 'string') {\r\n        throw new InvalidUniqueIdError('Missing or invalid value for \\'uniqueId\\'. Please provide the username from TikTok URL.');\r\n    }\r\n\r\n    // Support full URI\r\n    uniqueId = uniqueId.replace('https://www.tiktok.com/', '');\r\n    uniqueId = uniqueId.replace('/live', '');\r\n    uniqueId = uniqueId.replace('@', '');\r\n    uniqueId = uniqueId.trim();\r\n    return uniqueId;\r\n}\r\n\r\n\r\nexport function userAgentToDevicePreset(userAgent: string): DevicePreset {\r\n    const firstSlash = userAgent.indexOf('/');\r\n    const browserName = userAgent.substring(0, firstSlash);\r\n    const browserVersion = userAgent.substring(firstSlash + 1);\r\n\r\n    return {\r\n        user_agent: userAgent,\r\n        browser_name: browserName,\r\n        browser_version: browserVersion,\r\n        browser_platform: userAgent.includes('Macintosh') ? 'MacIntel' : 'Win32',\r\n        os: userAgent.includes('Macintosh') ? 'mac' : 'windows'\r\n    };\r\n}\r\n\r\nexport function generateDeviceId() {\r\n    let digits = '';\r\n    for (let i = 0; i < 19; i++) {\r\n        digits += Math.floor(Math.random() * 10);\r\n    }\r\n    return digits;\r\n}\r\n"]}